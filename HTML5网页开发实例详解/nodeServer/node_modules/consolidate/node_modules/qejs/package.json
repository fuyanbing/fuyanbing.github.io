{
  "name": "qejs",
  "description": "Asyncronous Embedded JavaScript Templates with Q",
  "version": "0.0.1",
  "keywords": [
    "templating",
    "template",
    "engine",
    "promises",
    "Q",
    "EJS",
    "JavaScript",
    "async",
    "Asyncronous"
  ],
  "dependencies": {
    "q": "0.8.5"
  },
  "readme": "# Asyncronous Embedded JavaScript Templates with Q\r\n\r\nThis library impliments Embedded JavaScript with some asyncronous additions provided by Q.  It is broadly based on https://github.com/visionmedia/ejs and fully supports everything except filters.  For a full discussion of the reasoning behind this, see Features below.  The promises implimentation for ayncronous operations uses https://github.com/kriskowal/q so you'll need to make sure that all asyncronous functions/values you supply to the templates are 'thenables' so that they'll work with Q.  All that means in practice is that you need your promises to have a function `then` that you can call with a promise.\r\n\r\n## Installation\r\n\r\n    $ npm install qejs\r\n\r\n## Example\r\n\r\n    <% if (user) { %>\r\n        <h2><%= user.getNameAsync() %></h2>\r\n    <% } %>\r\n\r\n## Usage\r\n\r\n    qejs.compile(str, options);\r\n    // => Function\r\n\r\n    qejs.render(str, options);\r\n    // => promise\r\n\r\n    qejs.render(str, options).then(function(output){\r\n            //output is a string\r\n        });\r\n\r\n## Options\r\n\r\n  - `cache`           Compiled functions are cached, requires `filename`\r\n  - `filename`        Used by `cache` to key caches\r\n  - `scope`           Function execution context\r\n  - `debug`           Output generated function body\r\n  - `open`            Open tag, defaulting to \"<%\"\r\n  - `close`           Closing tag, defaulting to \"%>\"\r\n  - *                 All others are template-local variables\r\n\r\n## Custom tags\r\n\r\nCustom tags can also be applied globally:\r\n\r\n    var qejs = require('qejs');\r\n    qejs.open = '{{';\r\n    qejs.close = '}}';\r\n\r\nWhich would make the following a valid template:\r\n\r\n    <h1>{{= title }}</h1>\r\n\r\n## Unbuffered Code\r\n\r\n```\r\n<% code %>\r\n```\r\n\r\nQEJS supports exactly the same syntax as EJS for unbuffered code, usefull for conditionals, loops etc.\r\n\r\n## Escapes HTML\r\n\r\n```\r\n<%= code %>\r\n```\r\n\r\nThis differs from EJS in that if `code` returns a promise, it is resolved and then escaped before being outputted.  While this is happening, QEJS will continue on to render the rest of the template, allowing many promised functions to be executed in parallel.\r\n\r\n## Unescapted Buffering\r\n\r\n```\r\n<%- code %>\r\n```\r\n\r\nIf `code` isn't a promise, this will work exactly like EJS, but if `code` is a promise, we will resolve it, before outputting the resolved value.  We won't do any escaping on this value, so only use for trusted values, not user input.\r\n\r\n## Async Blocks\r\n\r\n```\r\n<% promise -> value %>...Use value here...<% < %>\r\n<% PromiseForAnArray -> [valueA, valueB, valueC...] %>...Use values individually here...<% < %>\r\n<% [promiseA,promiseB,promiseC...] -> values %>...Use identifier as an array of resolved values...<% < %>\r\n<% [promiseA,promiseB,promiseC...] -> [valueA,valueB,valueC...] %>...Use values individually here...<% < %>\r\n```\r\n\r\nAsync blocks are considered a relatively advanced feature, and where possible you should try and tick to just returning promises through `<%= code %>` as it's much easier to write that without creating bugs.\r\n\r\nHaving said that, async blocks are not difficult to write and I hope you'll end up really loving them for those times when you really need them.\r\n\r\nWhat happens in an async block is we reserve a space for whatever text is outputted by the block, allowing you to use any QEJS inside the async block (including another async block).  We then resolve the value of the promise you give us, and we give it the name you specify on the right hand side of the arrow operator.  The async block starter must go in its own separate unbuffered code block, but you could put other things like comments inside the block with the end marker.\r\n\r\nOnce you go past the end marker of an async block, you will no longer have access to the value of the promise.  This lets us run lots of calls in parallel, and menas that you can use async blocks inside `if` statments, `for` statements, `while` statements, `functions` statements, pretty much anywhere you could write regular EJS.\r\n\r\n## Newlien slurping\r\n\r\nif you end any code block with a `-` even if it's an async block, we'll support newline slurping for you (`<% code -%>` or `<% -%>` or `<%= code -%>`, `<%- code -%>`, `<% promise -> result -%>` or `<% < -%>`)  That is to say, we won't output the next new line after we see that symbol.  QEJS never outputs a newline inside a code block.\r\n\r\n## Filters\r\n\r\nQEJS doesn't support filters.  Although in a way it seems a shame not to maintain 100% compatability with the syncronous form of EJS, I think that it's more important to keep this library lean.  Filters don't really add a lot, you can always attach such methods to arrays yourself and use standard javascript syntax, I don't want to hurt the purity of EJS though, so I've chosen not to add this syntax (bloat).\r\n\r\n## ExpressJS Integration\r\n\r\nI'm really keen to get express integration working, however unfortunately at version 2.x this isn't possible because of our asyncronous rendering, Shims can be made.  However I will endevour to ensure this does support Express.js @ v3.0 as soon as possible after that's released.\r\n\r\n## License \r\n\r\n(The MIT License)\r\n\r\nCopyright (c) 2012 Forbes Lindesay &lt;contact@jepso.coma&gt;\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n'Software'), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n## EJS License\r\n\r\nThe EJS License (by visionmedia) on which this library is based, is reproduced here:\r\n\r\n(The MIT License)\r\n\r\nCopyright (c) 2009-2010 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n'Software'), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
  "readmeFilename": "readme.md",
  "_id": "qejs@0.0.1",
  "dist": {
    "shasum": "e462a89d9d2ecfccbda03fef1ade6bc603886fe6"
  },
  "_from": "qejs@0.0.1",
  "_resolved": "https://registry.npmjs.org/qejs/-/qejs-0.0.1.tgz"
}
