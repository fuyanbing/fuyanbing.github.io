/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.75
 * Generated at: 2017-05-19 08:39:37 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.EasyUI.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class _05_005feditCombogrid_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');

String path = request.getContextPath();
String basePath = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+path+"/";

      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<base href=\"");
      out.print(basePath);
      out.write("\">\r\n");
      out.write("<title>数据表格的增删改查编辑</title>\r\n");
      out.write("\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\" src=\"EasyUI/js/jquery-1.7.2.min.js\"></script>\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"EasyUI/css/easyui.css\" />\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"EasyUI/css/icon.css\" />\r\n");
      out.write("<script type=\"text/javascript\" src=\"EasyUI/js/jquery.easyui.min.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\" src=\"EasyUI/js/easyui-lang-zh_CN.js\"></script>\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"EasyUI/css/yemian.css\" />\r\n");
      out.write("<script type=\"text/javascript\" src=\"EasyUI/js/commons.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("$(function(){\r\n");
      out.write("\tvar editing; //判断用户是否处于编辑状态\r\n");
      out.write("\tvar flag; //判断新增和修改方法\r\n");
      out.write("\t$('#t_user').datagrid({\r\n");
      out.write("\t\tidField:'id',\r\n");
      out.write("\t\ttitle:'可编辑的数据表格',\r\n");
      out.write("\t\tfitColumns:true,\r\n");
      out.write("\t\turl:'UserServlet?method=getList',\r\n");
      out.write("\t\tstriped:true,//True 就把行条纹化。（即奇偶行使用不同背景色）\r\n");
      out.write("\t\tloadMsg:'数据正在加载，请耐心等待...',\r\n");
      out.write("\t\tfrozenColumns:[[\r\n");
      out.write("\t\t\t{field:'ck',checkbox:true}\r\n");
      out.write("\t\t]],\r\n");
      out.write("\t\tcolumns:[[\r\n");
      out.write("\t\t\t{\r\n");
      out.write("\t\t\t\tfield:'username',\r\n");
      out.write("\t\t\t\ttitle:'用户名',\r\n");
      out.write("\t\t\t\twidth:100,\r\n");
      out.write("\t\t\t\talign:'center',\r\n");
      out.write("\t\t\t\tstyle:function(value,record){\r\n");
      out.write("\t\t\t\t\tif(value == 'admin'){\r\n");
      out.write("\t\t\t\t\t\treturn 'background:blue;';\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\teditor:{\r\n");
      out.write("\t\t\t\t\ttype:'validatebox',\r\n");
      out.write("\t\t\t\t\toptions:{\r\n");
      out.write("\t\t\t\t\t\trequired:true,\r\n");
      out.write("\t\t\t\t\t\tmissingMessage:'用户名必填！'\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\t{\r\n");
      out.write("\t\t\t\tfield:'password',\r\n");
      out.write("\t\t\t\ttitle:'密码',\r\n");
      out.write("\t\t\t\twidth:100,\r\n");
      out.write("\t\t\t\teditor:{\r\n");
      out.write("\t\t\t\t\ttype:'validatebox', //并未验证 等待中。。。。。。。。\r\n");
      out.write("\t\t\t\t\toptions:{\r\n");
      out.write("\t\t\t\t\t\trequired:true,\r\n");
      out.write("\t\t\t\t\t\tmissingMessage:'密码必填!'\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\t{\r\n");
      out.write("\t\t\t\tfield:'age',\r\n");
      out.write("\t\t\t\ttitle:'年龄',\r\n");
      out.write("\t\t\t\twidth:100,\r\n");
      out.write("\t\t\t\tsortable:true,\r\n");
      out.write("\t\t\t\teditor:{\r\n");
      out.write("\t\t\t\t\ttype:'numberbox',\r\n");
      out.write("\t\t\t\t\toptions:{\r\n");
      out.write("\t\t\t\t\t\trequired:true,\r\n");
      out.write("\t\t\t\t\t\tmissingMessage:'年龄必填!',\r\n");
      out.write("\t\t\t\t\t\tmin:0,\r\n");
      out.write("\t\t\t\t\t\tmax:150,\r\n");
      out.write("\t\t\t\t\t\tprecision:0\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t},{\r\n");
      out.write("\t\t\t\tfield:'sex',\r\n");
      out.write("\t\t\t\ttitle:'性别',\r\n");
      out.write("\t\t\t\twidth:50,\r\n");
      out.write("\t\t\t\tformatter:function(value,record,index){\r\n");
      out.write("\t\t\t\t\tif(value==1){\r\n");
      out.write("\t\t\t\t\t\treturn '<span style=color:red;>男</span>';\r\n");
      out.write("\t\t\t\t\t}else if (value == 2){\r\n");
      out.write("\t\t\t\t\t\treturn '<span style=color:green;>女</span>';\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\teditor:{\r\n");
      out.write("\t\t\t\t\ttype:'combobox',\r\n");
      out.write("\t\t\t\t\toptions:{\r\n");
      out.write("\t\t\t\t\t\tdata:[{id:1,val:'男'},{id:2,val:'女'}],\r\n");
      out.write("\t\t\t\t\t\tvalueField:'id',\r\n");
      out.write("\t\t\t\t\t\ttextField:'val',\r\n");
      out.write("\t\t\t\t\t\trequired:true,\r\n");
      out.write("\t\t\t\t\t\tmissingMessage:'性别必填!'\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t},{\r\n");
      out.write("\t\t\t\tfield:'birthday',\r\n");
      out.write("\t\t\t\ttitle:'生日',\r\n");
      out.write("\t\t\t\twidth:100,\r\n");
      out.write("\t\t\t\tsortable:true,\r\n");
      out.write("\t\t\t\teditor:{\r\n");
      out.write("\t\t\t\t\ttype:'datebox',\r\n");
      out.write("\t\t\t\t\toptions:{\r\n");
      out.write("\t\t\t\t\t\trequired:true,\r\n");
      out.write("\t\t\t\t\t\tmissingMessage:'生日必填!',\r\n");
      out.write("\t\t\t\t\t\teditable:false //禁止手动输入\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t},{\r\n");
      out.write("\t\t\t\tfield:'startTime',\r\n");
      out.write("\t\t\t\ttitle:'开始时间',\r\n");
      out.write("\t\t\t\twidth:150,\r\n");
      out.write("\t\t\t\teditor:{\r\n");
      out.write("\t\t\t\t\ttype:'datetimebox',\r\n");
      out.write("\t\t\t\t\toptions:{\r\n");
      out.write("\t\t\t\t\t\trequired:true,\r\n");
      out.write("\t\t\t\t\t\tmissingMessage:'时间必填!',\r\n");
      out.write("\t\t\t\t\t\teditor:false\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t},{\r\n");
      out.write("\t\t\t\tfield:'endTime',\r\n");
      out.write("\t\t\t\ttitle:'结束时间',\r\n");
      out.write("\t\t\t\twidth:150,\r\n");
      out.write("\t\t\t\teditor:{\r\n");
      out.write("\t\t\t\t\ttype:'datetimebox',\r\n");
      out.write("\t\t\t\t\toptions:{\r\n");
      out.write("\t\t\t\t\t\trequired:true,\r\n");
      out.write("\t\t\t\t\t\tmissingMessage:'时间必填!',\r\n");
      out.write("\t\t\t\t\t\teditor:false\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t},{\r\n");
      out.write("\t\t\t\tfield:'city',\r\n");
      out.write("\t\t\t\ttitle:'城市',\r\n");
      out.write("\t\t\t\twidth:100,\r\n");
      out.write("\t\t\t\tformatter:function(value,record,index){\r\n");
      out.write("\t\t\t\t\tif(value==1){\r\n");
      out.write("\t\t\t\t\t\treturn '北京';\r\n");
      out.write("\t\t\t\t\t}else if(value==2){\r\n");
      out.write("\t\t\t\t\t\treturn '上海';\r\n");
      out.write("\t\t\t\t\t}else if(value==3){\r\n");
      out.write("\t\t\t\t\t\treturn '深圳';\r\n");
      out.write("\t\t\t\t\t}else if(value==4){\r\n");
      out.write("\t\t\t\t\t\treturn '长春';\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\teditor:{\r\n");
      out.write("\t\t\t\t\ttype:'combobox',\r\n");
      out.write("\t\t\t\t\toptions:{\r\n");
      out.write("\t\t\t\t\t\turl:'UserServlet?method=getCity',\r\n");
      out.write("\t\t\t\t\t\tvalueField:'id',\r\n");
      out.write("\t\t\t\t\t\ttextField:'name',\r\n");
      out.write("\t\t\t\t\t\trequired:true,\r\n");
      out.write("\t\t\t\t\t\tmissingMessage:'城市必填!'\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t},{\r\n");
      out.write("\t\t\t\tfield:'salary',\r\n");
      out.write("\t\t\t\ttitle:'薪水',\r\n");
      out.write("\t\t\t\twidth:100,\r\n");
      out.write("\t\t\t\teditor:{\r\n");
      out.write("\t\t\t\t\ttype:'numberbox',\r\n");
      out.write("\t\t\t\t\toptions:{\r\n");
      out.write("\t\t\t\t\t\trequired:true,\r\n");
      out.write("\t\t\t\t\t\tmissingMessage:'薪水必填!',\r\n");
      out.write("\t\t\t\t\t\tmin:1000,\r\n");
      out.write("\t\t\t\t\t\tmax:20000,\r\n");
      out.write("\t\t\t\t\t\tprecision:2\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t},{\r\n");
      out.write("\t\t\t\tfield:'description',\r\n");
      out.write("\t\t\t\ttitle:'个人描述',\r\n");
      out.write("\t\t\t\twidth:150,\r\n");
      out.write("\t\t\t\tformatter:function(value,record,index){\r\n");
      out.write("\t\t\t\t\treturn '<span title='+ value +'>' + value +'</span>';\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\teditor:{\r\n");
      out.write("\t\t\t\t\ttype:'validatebox',\r\n");
      out.write("\t\t\t\t\toptions:{\r\n");
      out.write("\t\t\t\t\t\trequired:true,\r\n");
      out.write("\t\t\t\t\t\tmissingMessage:'描述必填!'\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t]],\r\n");
      out.write("\t\tpagination:true,\r\n");
      out.write("\t\tpageSize:10,\r\n");
      out.write("\t\tpageList:[5,10,15,20,50],\r\n");
      out.write("\t\ttoolbar:[\r\n");
      out.write("\t\t\t{\r\n");
      out.write("\t\t\t\ttext:'新增用户',\r\n");
      out.write("\t\t\t\ticonCls:'icon-add',\r\n");
      out.write("\t\t\t\thandler:function(){\r\n");
      out.write("\t\t\t\t\tif(editing == undefined){\r\n");
      out.write("\t\t\t\t\t\tflag = 'add';\r\n");
      out.write("\t\t\t\t\t\tediting = 0;\r\n");
      out.write("\t\t\t\t\t\t//1.先取消所有的选中状态\r\n");
      out.write("\t\t\t\t\t\t$('#t_user').datagrid('unselectAll');\r\n");
      out.write("\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t$('#t_user').datagrid('insertRow',{\r\n");
      out.write("\t\t\t\t\t\t\tindex: 0,\r\n");
      out.write("\t\t\t\t\t\t\trow: {}\r\n");
      out.write("\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t\t$('#t_user').datagrid('beginEdit', 0);\r\n");
      out.write("\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t},{\r\n");
      out.write("\t\t\t\ttext:'修改用户',\r\n");
      out.write("\t\t\t\ticonCls:'icon-edit',\r\n");
      out.write("\t\t\t\thandler:function(){\r\n");
      out.write("\t\t\t\t\t//获取所有选中的行数 返回数组\r\n");
      out.write("\t\t\t\t\tvar arr = $('#t_user').datagrid('getSelections');\r\n");
      out.write("\t\t\t\t\t//console.info(arr);\r\n");
      out.write("\t\t\t\t\tif(arr.length != 1){\r\n");
      out.write("\t\t\t\t\t\t\t$.messager.show({\r\n");
      out.write("\t\t\t\t\t\t\t\ttitle:'提示信息',\r\n");
      out.write("\t\t\t\t\t\t\t\tmsg:'只能选择一条记录进行修改!' \r\n");
      out.write("\t\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\tif(editing == undefined){\r\n");
      out.write("\t\t\t\t\t\t\tflag = 'edit';\r\n");
      out.write("\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t\t//根据行记录对象获取该行的索引位置\r\n");
      out.write("\t\t\t\t\t\t\t//返回指定行的索引，row 参数可以是一个行记录或者一个 id 字段的值。\r\n");
      out.write("\t\t\t\t\t\t\tediting = $('#t_user').datagrid('getRowIndex',arr[0]);\r\n");
      out.write("\t\t\t\t\t\t\t//console.info(editing);\r\n");
      out.write("\t\t\t\t\t\t\t//开启编辑状态\r\n");
      out.write("\t\t\t\t\t\t\t$('#t_user').datagrid('beginEdit',editing);\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t},{\r\n");
      out.write("\t\t\t\ttext:'保存用户',\r\n");
      out.write("\t\t\t\ticonCls:'icon-save',\r\n");
      out.write("\t\t\t\thandler:function(){\r\n");
      out.write("\t\t\t\t\t//保存之前进行数据的校验，然后结束编辑并释放编辑状态字段\r\n");
      out.write("\t\t\t\t\tif($('#t_user').datagrid('validateRow',editing)){\r\n");
      out.write("\t\t\t\t\t\t//validateRow 验证指定的行，有效时返回 true。\r\n");
      out.write("\t\t\t\t\t\t$('#t_user').datagrid('endEdit', editing);\r\n");
      out.write("\t\t\t\t\t\tediting = undefined;\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t},{\r\n");
      out.write("\t\t\t\ttext:'删除用户',\r\n");
      out.write("\t\t\t\ticonCls:'icon-remove',\r\n");
      out.write("\t\t\t\thandler:function(){\r\n");
      out.write("\t\t\t\t\tvar arr = $('#t_user').datagrid('getSelections');\r\n");
      out.write("\t\t\t\t\tif(arr.length == 0 ){\r\n");
      out.write("\t\t\t\t\t\t$.messager.show({\r\n");
      out.write("\t\t\t\t\t\t\ttitle:'提示信息',\r\n");
      out.write("\t\t\t\t\t\t\tmsg:'请至少选择一条删除操作!'\r\n");
      out.write("\t\t\t\t\t\t});\t\t\t\t\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t$.messager.confirm('提示信息',' 确认删除？',function(r){\r\n");
      out.write("\t\t\t\t\t\t\tif(r){\r\n");
      out.write("\t\t\t\t\t\t\t\tvar ids = '';\r\n");
      out.write("\t\t\t\t\t\t\t\t//console.info(arr);\r\n");
      out.write("\t\t\t\t\t\t\t\t//console.info(arr[0].id);\r\n");
      out.write("\t\t\t\t\t\t\t\tfor(var i=0; i<arr.length; i++){\r\n");
      out.write("\t\t\t\t\t\t\t\t\tids += arr[i].id + \",\"\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\tids = ids.substring(0,ids.length-1);\r\n");
      out.write("\t\t\t\t\t\t\t\t//console.info(ids);\r\n");
      out.write("\t\t\t\t\t\t\t\t$.post('UserServlet?method=delete',{ids:ids},function(result){\r\n");
      out.write("\t\t\t\t\t\t\t\t\t$('#t_user').datagrid('reload');\r\n");
      out.write("\t\t\t\t\t\t\t\t\t$('#t_user').datagrid('unselectAll');\r\n");
      out.write("\t\t\t\t\t\t\t\t\t$.messager.show({\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\ttitle:'提示信息',\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tmsg:'操作成功!'\r\n");
      out.write("\t\t\t\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t\t\t}else{\r\n");
      out.write("\t\t\t\t\t\t\t\treturn ;\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t})\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t},{\r\n");
      out.write("\t\t\t\ttext:'取消操作',\r\n");
      out.write("\t\t\t\ticonCls:'icon-cancel',\r\n");
      out.write("\t\t\t\thandler:function(){\r\n");
      out.write("\t\t\t\t\t//rejectChanges回滚数据  回滚自从创建以来或最后一次调用 acceptChanges 以来所有更改的数据。\r\n");
      out.write("\t\t\t\t\t$('#t_user').datagrid('rejectChanges');\r\n");
      out.write("\t\t\t\t\tediting = undefined;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t],\r\n");
      out.write("\t\t//onAfterEdit 当用户完成编辑一行时触发，参数包括：\r\n");
      out.write("\t\tonAfterEdit:function(index,record){\r\n");
      out.write("\t\t\t$.post(flag=='add'?'UserServlet?method=save':'UserServlet?method=update',record,function(result){\r\n");
      out.write("\t\t\t\t$.messager.show({\r\n");
      out.write("\t\t\t\t\ttitle:'提示信息',\r\n");
      out.write("\t\t\t\t\tmsg:'操作成功'\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t})\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("})\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<table id=\"t_user\"></table>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
